<style>
	.subtex {
		font-size:48px;
		align-content:center;
		vertical-align:middle;
		display:inline-flex;
		margin-right:8px;
		line-height:1;
	}
</style>
<h1> Valkyrie Core </h1>
<p class="flow-text">
	The Valkyrie Core is the starting point for interaction with the rest of
	Valkyrie, as it provides an interface for loading libraries, components and
	settings for use and application in your code.
</p>
<span class="cyan-text text-lighten-1 subtex"> <i class="material-icons subtex">code</i> Methods </span>
<ul class="collapsible popout" data-collapsible="accordion">
	<li name="GetComponent">
		<div class="collapsible-header" id="GetComponent">GetComponent <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">GetComponent</span>(
		<span class="green-text text-lighten-2">string</span> ComponentName
	) -> <span class="green-text text-lighten-2">Component</span> ComponentName
			</pre>
			<p class="flow-text">
				GetComponent allows access to all of Valkyrie's core Components
				and all other implementations made accessible through Valkyrie.
			</p>
			<p class="flow-text">
				GetComponent takes a single argument, which is the name of the
				component you're trying to access, and returns the component
				which matches the name. For a complete list of components, take
				a look at the <a href="//valkyrie.crescentcode.net/docs/Components">
					Components
				</a> section.
			</p>
			<p class="flow-text grey-text text-lighten-1">
				<em>Aliases: GetService </em>
			</p>
		</div>
	</li>
	<li name="SetComponent">
		<div class="collapsible-header" id="SetComponent">SetComponent <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">SetComponent</span>(
		<span class="green-text text-lighten-2">var</span> Component,
		<span class="green-text text-lighten-2">string</span> ComponentName
	) -> <span class="green-text text-lighten-2">Component</span> ComponentName
			</pre>
			<p class="flow-text">
				SetComponent allows developers to allow parts of their code to
				be exposed to other developers through Valkyrie, making sure
				that their component controllers can be accessed through a
				central and unified location.
			</p>
			<p class="flow-text grey-text text-lighten-1">
				<em>Aliases: SetService </em>
			</p>
		</div>
	</li>
	<li name="GetSettings">
		<div class="collapsible-header" id="GetSettings">GetSettings <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">GetSettings</span>(
		<span class="green-text text-lighten-2">string</span> SettingsName
	) -> | SettingsName == <span class="red-text text-lighten-2">nil</span> : <span class="green-text text-lighten-2">Settings</span> Settings.Custom
	     | SettingsName == <span class="amber-text text-lighten-1">"Core"</span> : <span class="green-text text-lighten-2">Settings</span> Settings.Core
	     | <span class="green-text text-lighten-2">Settings</span> Settings[SettingsName]
			</pre>
			<p class="flow-text">
				GetSettings allows both game developers and component developers
				to create and access settings with bindable get/set events and
				behaviours.
			</p>
		</div>
	</li>
	<li name="GetGID">
		<div class="collapsible-header" id="GetGID">GetGID <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">GetGID</span>() -> <span class="green-text text-lighten-2">string</span> GameId
			</pre>
			<p class="flow-text">
				The GameId is needed for internal code, and can be used by
				developers to find the identifier that Valkyrie uses internally
				to recognise the game, and the name that the game was given by
				the creator.
			</p>
		</div>
	</li>
	<li name="GetURL">
		<div class="collapsible-header" id="GetURL">GetURL <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">GetURL</span>() -> <span class="green-text text-lighten-2">string</span> ValkyrieURL
			</pre>
			<p class="flow-text">
				The Valkyrie base API URL is used internally to create requests
				to the Valkyrie server. It can be used by developers to hand
				craft requests, provided that they have the auth pair for the
				game.
			</p>
		</div>
	</li>
	<li name="LoadLibrary">
		<div class="collapsible-header" id="LoadLibrary">LoadLibrary <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">LoadLibrary</span>(
		<span class="green-text text-lighten-2">string</span> LibraryName
	) -> <span class="red-text text-lighten-2">nil</span>
			</pre>
			<p class="flow-text">
				LoadLibrary allows a developer to inject a wrapper into their
				code in a single line, changing how all of the code works behind
				the scenes.
			</p>
			<p class="flow-text">
				For more information on Libraries, look at the <a href="//valkyrie.crescentcode.net/docs/Core/Libraries">
				Libraries Documentation</a>. For a complete list of all the
				Valkyrie libraries, look at the <a href="//valkyrie.crescentcode.net/docs/Libraries">
				Libraries Category</a>.
			</p>
		</div>
	</li>
	<li name="AddLibrary">
		<div class="collapsible-header" id="AddLibrary">AddLibrary <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">AddLibrary</span>(
		<span class="green-text text-lighten-2">function(wrapper)</span> LibraryInjector,
		<span class="green-text text-lighten-2">string</span> LibraryName
	) -> <span class="red-text text-lighten-2">nil</span>
			</pre>
			<p class="flow-text">
				AddLibrary allows developers to add their own libraries to the
				internal list of Libraries for LoadLibrary. The injector
				function is run when the library is loaded, with the same
				environment as the parent function.
			</p>
		</div>
	</li>
	<li name="GenerateWrapper">
		<div class="collapsible-header" id="GenerateWrapper">GenerateWrapper <em class="right grey-text text-lighten-1">Hybrid</em></div>
		<div class="collapsible-body">
			<pre>
	<span class="blue-text text-lighten-1">GenerateWrapper</span>(
		<span class="green-text text-lighten-2">bool</span> UseGlobalCache
	) -> <span class="green-text text-lighten-2">Wrapper</span> NewWrapper
			</pre>
			<p class="flow-text">
				GenerateWrapper allows a developer to create their own Valkyrie
				wrapper object to fiddle with. If UseGlobalCache is true, the
				wrapper object uses a shared cache with other Valkyrie wrappers
				using the global lib.
			</p>
			<p class="flow-text">
				Practical applications of generating a wrapper manually include
				creating a sandbox for user code (In Script Builders) or for
				including in modules which may wish to implement their own
				wrappings and injectors.
			</p>
		</div>
	</li>
</ul>
<br>
<span class="cyan-text text-lighten-1 subtex"> <i class="material-icons subtex">settings</i> Settings </span>
<p class="flow-text grey-text text-lighten-1">
	Settings.Core
</p>
<ul class="collapsible popout" data-collapsible="accordion">
	<li name="UseGlobalLib">
		<div class="collapsible-header" id="UseGlobalLib">UseGlobalLib</div>
		<div class="collapsible-body">
			<p class="flow-text grey-text text-lighten-1">
				Valid types: <span class="green-text">bool</span>
				<br>
				Default value: <span class="purple-text">true</span>
			</p>
			<p class="flow-text">
				UseGlobalLib tells the Valkyrie wrapper whether to share its
				cache with other wrappers when creating a wrapper from inside of
				LoadLibrary. If set to true, it could cause unexpected behaviour.
				Use with caution, and only if you know what you are doing.
			</p>
		</div>
	</li>
</ul>

<script>
	document.getElementById(document.location.hash.substr(1)).className += " active";
</script>