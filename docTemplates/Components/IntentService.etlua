<% render('docUtils.eRender',{
Title = "Intent Service";
Body = [[
The Valkyrie Intent Service allows scripts to make events by name. It means that
an event can not be destroyed, it does not have to exist before invoking/listening,
and that all plugins and scripts have a simple uniform way to subscribe to events
by a single memorable name. Intents are a fire and forget method of events.
]];
Methods = {
{
	Name = "BroadcastRPCIntent";
	Meta = "Client";
	Arguments = {
	{
		Name = "IntentName";
		Type = "string";
	};
	{
		Name = "...";
		Type = "var";
	};
	};
	Body = [[
	On the client, this provides a simple way to fire an intent on the server.
	The first argument is the name of the intent on the server, and the rest are
	the arguments.
	]];
};
{
	Name = "BroadcastRPCIntent";
	Meta = "Server";
	Arguments = {
	{
		Name = "IntentName";
		Type = "string";
	};
	{
		Name = "PlayerName";
		Type = "var";
		OfType = "string, Player";
	};
	{
		Name = "...";
		Type = "var";
	};
	};
	Body = [[
	This allows the server to fire an intent on the client. The first argument is
	the name of the intent to fire on the client, the second argument can either
	be the string 'All' or a Player, and the rest are the arguments for the intent.

	If the PlayerName is 'All' then all clients will recieve the intent. If the
	PlayerName is a Player then the intent will be fired on that specific Player's
	client.
	]];
};
{
	Name = "RegisterRPCIntent";
	Meta = "Client";
	Arguments = {
	{
		Name = "IntentName";
		Type = "string";
	};
	{
		Name = "IntentFunction";
		Type = "function";
		Meta = {
			Arguments = {
			{
				Name = "...";
				Type = "var";
			};
			};
		};
	};
	};
	Returns = {
	{
		Name = "Connection";
		Type = "VlkyrConnection";
	};
	};
	Body = [[
	Allows you to subscribe a function to the intent in question. It will return
	an event connection which you can call `:disconnect` on in order to stop the
	function from being invoked every time the intent fires.
	]];
};
{
	Name = "RegisterRPCIntent";
	Meta = "Server";
	Arguments = {
	{
		Name = "IntentName";
		Type = "string";
	};
	{
		Name = "IntentFunction";
		Type = "function";
		Meta = {
			Arguments = {
			{
				Name = "PlayerWhoFired";
				Type = "Player";
			};
			{
				Name = "...";
				Type = "var";
			};
			};
		};
	};
	};
	Returns = {
	{
		Name = "Connection";
		Type = "VlkyrConnection";
	};
	};
	Body = [[
	Allows you to subscribe a function to the intent in question. It will return
	an event connection which you can call `:disconnect` on in order to stop the
	function from being invoked every time the intent fires. The subscribing event
	will be passed the Player of the client that fired the intent as the first
	argument.
	]];
};
{
	Name = "RegisterIntent";
	Arguments = {
	{
		Name = "IntentName";
		Type = "string";
	};
	{
		Name = "IntentFunction";
		Type = "function";
		Meta = {
			Arguments = {
			{
				Name = "...";
				Type = "var";
			};
			};
		};
	};
	};
	Returns = {
	{
		Name = "Connection";
		Type = "VlkyrConnection";
	};
	};
	Body = [[
	Allows you to subscribe a function to the intent in question. It will return
	an event connection which you can call `:disconnect` on in order to stop the
	function from being invoked every time the intent fires.
	]];
};
{
	Name = "BroadcastIntent";
	Arguments = {
	{
		Name = "IntentName";
		Type = "string";
	};
	{
		Name = "...";
		Type = "var";
	};
	};
	Body = [[
	Allows you to invoke all functions subscribed to `IntentName`.
	]];
	Aliases = "FireIntent";
};
};


}) %>