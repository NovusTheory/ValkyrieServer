<%
	local function ArgumentHTML(arg, n, ninl)
		local ret =
			[[<span class="green-text text-lighten-1">]] ..
				arg.Type .. ((arg.Required == false or arg.Nullable) and "?" or "") ..
			[[</span> ]] ..
			arg.Name;
		if arg.Detail then
			local _ninl = arg.Detail;
			ret = ret .. (arg.Type == "function" and " (\n" or " {\n");
			for _n = 1, #_ninl do
				local _arg = _ninl[_n];
				ret = ret .. ArgumentHTML(_arg, _n, _ninl):gsub("^(.)", "\t%1"):gsub("\n", "\n\t") .. "\n";
			end
			ret = ret .. (arg.Type == "function" and ")" or "}");
		end
		if arg.Default then
			ret = ret .. " = " ..
				[[<span class="<%=arg.Type == 'string' and 'amber' or (arg.Default == 'nil' and 'red' or 'purple')%>-text">]] ..
					(arg.Type == 'string' and '"'..arg.Default..'"' or arg.Default) ..
				[[</span>]]
		end
		ret = ret ..
			(n==#ninl and "" or ",");
		return ret;
	end;

	local function ReturnHTML(ReturnData)
		local ret = "";
		if ReturnData then
			ret = ret .. "-> ";
			if ReturnData.Conditions then
				for n=1,#ReturnData.Conditions do
					if n ~= 1 then
						ret = ret .. "\t ";
					end
					ret = ret .. "| " .. ReturnData.Conditions[n].Condition .. " : ";
					for m=1,#ReturnData.Conditions[n].Returns do
						local arg = ReturnData.Conditions[n].Returns[m];
						ret = ret .. (m==1 and "" or ", ") ..
							[[<span class="green-text text-lighten-1">]] ..
							arg.Type ..
							[[</span> ]] .. arg.Name;
					end
					ret = ret .. "\n\t";
				end
			end
			for n=1,#ReturnData do
				local arg = ReturnData[n];
				ret = ret .. (n==1 and "" or ", ") ..
					[[<span class="green-text text-lighten-1">]] ..
						arg.Type ..
					[[</span> ]] .. arg.Name;
			end
		else
			ret = ret .. [[-> <span class="red-text text-lighten-1">nil</span>]];
		end
		return ret;
	end
%>

<link rel="stylesheet" media="screen" href="https://fontlibrary.org/face/fantasque-sans-mono" type="text/css"/>

<style>
	.subtex {
		font-size:48px;
		align-content:center;
		vertical-align:middle;
		display:inline-flex;
		margin-right:8px;
		line-height:1;
		margin-bottom:12px;
	}
	.popout {
		margin-bottom:48px;
	}
	pre {
		tab-size: 4;
		font-family:"FantasqueSansMonoRegular";
	}
</style>
<h1><%= Title %></h1>
<p class="flow-text">
	<%= Body %>
</p>
<% if Properties then %>
<ul class="collapsible popout" data-collapsible="accordion">
	<span class="cyan-text text-lighten-1 subtex"> <i class="material-icons subtex">create</i> Properties </span>
	<% for i=1,#Properties do
		local v = Properties[i] %>
		<li name="<%= v.Name %>">
			<div class="collapsible-header" id="<%= v.Name %>"><%= v.Name %>
			<% if v.Meta then %> <em class="right grey-text text-lighten-1"><%= v.Meta %></em> <% end %>
			</div>
			<div class="collapsible-body">
				<p class="flow-text grey-text text-lighten-1">
					Valid types: <span class="green-text"><%= v.Type %></span>
					<br>
					Default value: <span class="<%= type(v.Default) == 'string' and 'amber' or 'purple' %>-text"><%= v.Default %></span>
				</p>
				<p class="flow-text">
					<%= v.Body %>
				</p>
			</div>
		</li>
	<% end %>
</ul>
<% end %>
<% if Methods then %>
<ul class="collapsible popout" data-collapsible="accordion">
	<span class="cyan-text text-lighten-1 subtex"> <i class="material-icons subtex">code</i> Methods </span>
	<% for i=1,#Methods do
		local v = Methods[i] %>
		<li name="<%= v.Name %>">
			<div class="collapsible-header" id="<%= v.Name %>"><%= v.Name %>
			<% if v.Meta then %> <em class="right grey-text text-lighten-1"><%= v.Meta %></em> <% end %>
			</div>
			<div class="collapsible-body">
				<pre>
	<span class="blue-text text-lighten-1"><%= v.Name %></span>( <% local ninl = v.Arguments; for n=1, #ninl do local arg = ninl[n]; %>
<%- ArgumentHTML(arg, n, ninl):gsub("^(.)", "\t\t%1"):gsub("\n", "\n\t\t") %><% end %>
	) <%- ReturnHTML(v.Returns) %>
				</pre>
				<p class="flow-text">
					<%= v.Body %>
				</p>
			</div>
		</li>
	<% end %>
</ul>
<% end %>
<% if Settings then %>
<ul class="collapsible popout" data-collapsible="accordion">
	<span class="cyan-text text-lighten-1 subtex"> <i class="material-icons subtex">settings</i> Settings </span>
	<p class="flow-text grey-text text-lighten-1">
		Settings.<%= Settings.Where %>
	</p>
	<% for i=1,#Settings do
		local v = Settings[i] %>
		<li name="<%= v.Name %>">
			<div class="collapsible-header" id="<%= v.Name %>"><%= v.Name %>
			<% if v.Meta then %> <em class="right grey-text text-lighten-1"><%= v.Meta %></em> <% end %>
			</div>
			<div class="collapsible-body">
				<p class="flow-text grey-text text-lighten-1">
					Valid types: <span class="green-text"><%= v.Type %></span>
					<br>
					Default value: <span class="<%= type(v.Default) == 'string' and 'amber' or 'purple' %>-text"><%= v.Default %></span>
				</p>
				<p class="flow-text">
					<%= v.Body %>
				</p>
			</div>
		</li>
	<% end %>
</ul>
<% end %>

<script>
	document.getElementById(document.location.hash.substr(1)).className += " active";
</script>