user ${{USER}};

error_log logs/error.log notice;

events {
  worker_connections 1024;
}

http {
  include mime.types;

  lua_shared_dict page_cache 64m;
  lua_shared_dict docs_cache 32m;
  lua_code_cache ${{CODE_CACHE}};

  server { # API server
    client_body_buffer_size 10m;
    listen ${{PORT}};
    server_name ${{SERVERNAME}};

    location / {
      set $_url "";
      default_type text/html;
      content_by_lua '
        require("lapis").serve("app")
      ';
    }
    
    location /docs {
      rewrite ^/docs(.*)$ http://docs.crescentcode.net/Valkyrie$1 break;
    }
  
    location /static/ {
      alias /root/valkyrie_server/static/;
    }
  
    location /favicon.ico {
      alias /root/valkyrie_server/static/favicon.ico;
    }
  
    location /proxy {
      internal;
      rewrite_by_lua "
        local req = ngx.req
  
        for k,v in pairs(req.get_headers()) do
          if k ~= 'content-length' then
            req.clear_header(k)
          end
        end
  
        if ngx.ctx.headers then
          for k,v in pairs(ngx.ctx.headers) do
            req.set_header(k, v)
          end
        end
      ";
  
      proxy_http_version 1.1;
      proxy_pass $_url;
      resolver 8.8.8.8;
    }
  }
}
